// Peterson with 6 processes using filter algorithm
const n = 6;

label wack = 1;
label p0_in_cs = p0.level == (n-1);

label mutual_exclusion = (p0.level == (n-1)) +
                            (p1.level == (n-1)) +
                            (p2.level == (n-1)) +
                            (p3.level == (n-1)) +
                            (p4.level == (n-1)) +
                            (p5.level == (n-1)) <= 1;

label multiple_in_cs = (p0.level == (n-1)) +
                        (p1.level == (n-1)) +
                        (p2.level == (n-1)) +
                        (p3.level == (n-1)) +
                        (p4.level == (n-1)) +
                        (p5.level == (n-1)) > 1;

player p0 = process [id=0, other = p1, other1 = p2, other2 = p3, other3 = p4, other4 = p5];
player p1 = process [id=1, other = p0, other1 = p2, other2 = p3, other3 = p4, other4 = p5];
player p2 = process [id=2, other = p0, other1 = p1, other2 = p3, other3 = p4, other4 = p5];
player p3 = process [id=3, other = p0, other1 = p1, other2 = p2, other3 = p4, other4 = p5];
player p4 = process [id=4, other = p0, other1 = p1, other2 = p2, other3 = p3, other4 = p5];
player p5 = process [id=5, other = p0, other1 = p1, other2 = p2, other3 = p3, other4 = p4];

last_to_enter_0 : [-1 .. n-1] init -1;
last_to_enter_0' = p0.proceed_to_level_0 ? 0 :
                    (p1.proceed_to_level_0 ? 1 :
                    (p2.proceed_to_level_0 ? 2 :
                    (p3.proceed_to_level_0 ? 3 :
                    (p4.proceed_to_level_0 ? 4 :
                    (p5.proceed_to_level_0 ? 5 : last_to_enter_0)))));

last_to_enter_1 : [-1 .. n-1] init -1;
last_to_enter_1' = p0.proceed_to_level_1 ? 0 :
                    (p1.proceed_to_level_1 ? 1 :
                    (p2.proceed_to_level_1 ? 2 :
                    (p3.proceed_to_level_1 ? 3 :
                    (p4.proceed_to_level_1 ? 4 :
                    (p5.proceed_to_level_1 ? 5 : last_to_enter_1)))));

last_to_enter_2 : [-1 .. n-1] init -1;
last_to_enter_2' = p0.proceed_to_level_2 ? 0 :
                    (p1.proceed_to_level_2 ? 1 :
                    (p2.proceed_to_level_2 ? 2 :
                    (p3.proceed_to_level_2 ? 3 :
                    (p4.proceed_to_level_2 ? 4 :
                    (p5.proceed_to_level_2 ? 5 : last_to_enter_2)))));

last_to_enter_3 : [-1 .. n-1] init -1;
last_to_enter_3' = p0.proceed_to_level_3 ? 0 :
                    (p1.proceed_to_level_3 ? 1 :
                    (p2.proceed_to_level_3 ? 2 :
                    (p3.proceed_to_level_3 ? 3 :
                    (p4.proceed_to_level_3 ? 4 :
                    (p5.proceed_to_level_3 ? 5 : last_to_enter_3)))));

last_to_enter_4 : [-1 .. n-1] init -1;
last_to_enter_4' = p0.proceed_to_level_4 ? 0 :
                    (p1.proceed_to_level_4 ? 1 :
                    (p2.proceed_to_level_4 ? 2 :
                    (p3.proceed_to_level_4 ? 3 :
                    (p4.proceed_to_level_4 ? 4 :
                    (p5.proceed_to_level_4 ? 5 : last_to_enter_4)))));

last_to_enter_5 : [-1 .. n-1] init -1;
last_to_enter_5' = p0.proceed_to_level_5 ? 0 :
                    (p1.proceed_to_level_5 ? 1 :
                    (p2.proceed_to_level_5 ? 2 :
                    (p3.proceed_to_level_5 ? 3 :
                    (p4.proceed_to_level_5 ? 4 :
                    (p5.proceed_to_level_5 ? 5 : last_to_enter_5)))));

template process

    level : [-1 .. n-1] init -1;
    level' = proceed_to_level_0 ? 0 :
            (proceed_to_level_1 ? 1 :
            (proceed_to_level_2 ? 2 :
            (proceed_to_level_3 ? 3 :
            (proceed_to_level_4 ? 4 :
            (proceed_to_level_5 ? 5 :
            (exit_cs ? -1 : level))))));

    other_level : [0 .. 1] init 0;
    other_level' = (other.level >= level) ||
                    (other1.level >= level) ||
                    (other2.level >= level) ||
                    (other3.level >= level) ||
                    (other4.level >= level);

    [proceed_to_level_0] level == -1;
    [proceed_to_level_1] (level == 0) && !((last_to_enter_0 == id) && other_level);
    [proceed_to_level_2] (level == 1) && !((last_to_enter_1 == id) && other_level);
    [proceed_to_level_3] (level == 2) && !((last_to_enter_2 == id) && other_level);
    [proceed_to_level_4] (level == 3) && !((last_to_enter_3 == id) && other_level);
    [proceed_to_level_5] (level == 4) && !((last_to_enter_4 == id) && other_level);

    [busy_loop] ((last_to_enter_0 == id) ||
                (last_to_enter_1 == id) ||
                (last_to_enter_2 == id) ||
                (last_to_enter_3 == id) ||
                (last_to_enter_4 == id))
                && other_level;

    [exit_cs] level == (n-1);

endtemplate