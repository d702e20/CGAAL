start := (decl semicolon | blockdecl)*

decl := constdecl
    | labeldecl

constdecl := "const" identifier eq expr;
labeldecl := "label" quote identifier quote eq expr

blockdecl := playerdecl | moduledecl

playerdecl := "player" identifier identifier "endplayer"
moduledecl := "module" identifier eq identifier relabeling "endmodule"
    | "module" identifier ((vardecl | transitiondecl) semicolon)* "endmodule"

vardecl := identifier colon type ("init" expr)?
transitiondecl := lbrac identifier rbrac expr arrow stateupdate

stateupdate := simplestateupdate
    | lpar simplestateupdate rpar (and lpar simplestateupdate rpar)*
simplestateupdate := identifier prime eq expr

relabeling := lbrac (identifier eq identifier (comma identifier eq identifier)*)? rbrac

type := lbrac expr rangedots expr rbrac

expr := identifier
	| int
	| true
	| false
	| not expr
	| expr binop expr
	| lpar expr rpar
	| bexpr questionmark expr colon expr
	...

comma := ","
semicolon := ";"
colon := ":"
arrow := "->"
assign := ":="

true := "true"
false := "false"

binop := and | or | xor | implies | eq | neq | gt | lt | geq | leq | plus | minus | mult | fdiv
not := "!"
eq := "="
neq := "!="
gt := ">"
lt := "<"
geq := ">="
leq := "<="
and := "&"
or := "|"
xor := "^"
implies := "=>"
questionmark := "?"
plus := "+"
minus := "-"
mult := "*"
fdiv := "/"

lpar := "("
rpar := ")"
lbrac := "["
rbrac := "]"
quote := "\""
prime := "'"
rangedots := ".."

identifier = [a-zA-Z] ([_a-zA-Z0-9])*
int := [1-9] [0-9]* | [0-9]