start := (constdecl semicolon | simpledecl semicolon | moduledecl)*

simpledecl := labeldecl
    | vardecl
    | playerdecl
    | statevarchangedecl
    | transitondecl

constdecl := "const" identifier eq expr;
labeldecl := "label" identifier eq expr
playerdecl := "player" identifier eq identifier relabeling?

templatedecl := "template" identifier params? (simpledecl semicolon)* "endtemplate"

params := lpar (param (comma param)*)? rpar
param := identifier colon identifier

vardecl := identifier colon type "init" expr

transitiondecl := lbrac identifier rbrac expr

statevarchangedecl := identifier prime eq expr

relabeling := lbrac (identifier eq identifier (comma identifier eq identifier)*)? rbrac

type := lbrac expr rangedots expr rbrac

param := lbrac identifier colon type (comma identifier colon type)* rbrac

expr := identifier
    | identifier dot identifier(
    | int
    | not expr
    | expr binop expr
    | expr questionmark expr colon expr
    | lpar expr rpar
    | "max" lpar expr (comma expr)* rpar
    | "min" lpar expr (comma expr)* rpar
	...

comma := ","
dot := "."
semicolon := ";"
colon := ":"
assign := "="

binop := and | or | xor | implies | eq | neq | gt | lt | geq | leq | plus | minus | mult | fdiv
not := "!"
eq := "=="
neq := "!="
gt := ">"
lt := "<"
geq := ">="
leq := "<="
and := "&&"
or := "||"
xor := "^"
implies := "->"
questionmark := "?"
plus := "+"
minus := "-"
mult := "*"
fdiv := "/"

lpar := "("
rpar := ")"
lbrac := "["
rbrac := "]"
quote := "\""
prime := "'"
rangedots := ".."

identifier = [a-zA-Z] ([_a-zA-Z0-9])*
int := [1-9] [0-9]* | [0-9] // 0 interpreted as false, all other is true