start := "players" players "statevars" statevars ("vars" colon vars)? "propositions" propositions "transitions" transitions EOF

players := identifier+
statevars := (identifier colon int eq int)+
vars := (identifier eq expr)*
propositions := identifier+ (bexpr arrow identifier+)*
transitions := (bexpr at expr+ arrow stateupdate)+
stateupdate := _ | (identifier assign expr)+

bexpr := identifier
	| not bexpr
	| some expr
	| expr comparison expr
	| bexpr binlogicop bexpr
	| lpar bexpr rpar
	...

expr := identifier
	| int
	| bexpr   # implicit conversion to 0 or 1
	| expr binop expr
	| lpar expr rpar
	| bexpr questionmark expr colon expr
	...

identifier = [a-zA-Z] ([_a-zA-Z0-9])*
int := [1-9] [0-9]* | [0-9]

colon := ":"
arrow := "=>"
at := "@"
assign := ":="

not := "!"
some := "?"
comparison := eq | neq | gt | lt | geq | leq
eq := "="
neq := "!="
gt := ">"
lt := "<"
geq := ">="
leq := "<="
binlogicop := and | or | xor | implies
and := "&&"
or := "||"
xor := "^"
implies := "->"
questionmark := "?"

binop := plus | minus | mult | fdiv
plus := "+"
minus := "-"
mult := "*"
fdiv := "/"

lpar := "("
rpar := ")"
