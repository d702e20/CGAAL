// Gossiping girls circular network
// Five girls, five secrets, each girl initially knows one secret (girl 1 knows secret 1, etc)
// Any girl can call neighbouring girls, i.e girl1 can call girl2 and girl4, girl2 can call girl1 and girl3 etc
// If girl1 calls girl2, and girl2 also calls girl1, they will learn each others secrets.
// They have to call each other (can be viewed as one calls, one answers)

player p1 = girl [friend1 = p5, friend2 = p2, starts_with_secret1 = 1, starts_with_secret2 = 0,
    starts_with_secret3 = 0, starts_with_secret4 = 0, starts_with_secret5 = 0];

player p2 = girl [friend1 = p1, friend2 = p3, starts_with_secret2 = 1, starts_with_secret1 = 0,
    starts_with_secret3 = 0, starts_with_secret4 = 0, starts_with_secret5 = 0];

player p3 = girl [friend1 = p2, friend2 = p4, starts_with_secret3 = 1, starts_with_secret1 = 0,
    starts_with_secret2 = 0, starts_with_secret4 = 0, starts_with_secret5 = 0];

player p4 = girl [friend1 = p3, friend2 = p5, starts_with_secret4 = 1, starts_with_secret1 = 0,
    starts_with_secret2 = 0, starts_with_secret3 = 0, starts_with_secret5 = 0];

player p5 = girl [friend1 = p4, friend2 = p1, starts_with_secret5 = 1, starts_with_secret1 = 0,
    starts_with_secret2 = 0, starts_with_secret3 = 0, starts_with_secret4 = 0];

label less_than_10_steps = step < 10;
step : [0..20] init 0;
step' = min(step + 1,20);

// Secrets is updated with taking max of both of the connecting girls,
// if either one have the secret it is updated to such that the other
// one have it too.
template girl
    label omniscient = secret1 * secret2 * secret3 * secret4 * secret5;

    secret1 : [0..1] init starts_with_secret1;
	secret1' =
		max(
			((call_friend1 * friend1.call_friend2) * friend1.secret1),
			((call_friend2 * friend2.call_friend1) * friend2.secret1),
			secret1);

    secret2 : [0..1] init starts_with_secret2;
	secret2' =
		max(
			((call_friend1 * friend1.call_friend2) * friend1.secret2),
			((call_friend2 * friend2.call_friend1) * friend2.secret2),
			secret2);

    secret3 : [0..1] init starts_with_secret3;
	secret3' =
		max(
			((call_friend1 * friend1.call_friend2) * friend1.secret3),
			((call_friend2 * friend2.call_friend1) * friend2.secret3),
			secret3);

    secret4 : [0..1] init starts_with_secret4;
	secret4' =
		max(
			((call_friend1 * friend1.call_friend2) * friend1.secret4),
			((call_friend2 * friend2.call_friend1) * friend2.secret4),
	    	secret4);

	secret5 : [0..1] init starts_with_secret5;
	secret5' =
	    max(
	        ((call_friend1 * friend1.call_friend2) * friend1.secret5),
	        ((call_friend2 * friend2.call_friend1) * friend2.secret5),
            secret5
	    );

	[call_friend1] 1;
    [call_friend2] 1;

endtemplate
