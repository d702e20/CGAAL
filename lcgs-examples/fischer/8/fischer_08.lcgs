const k = 2;

player p1 = process [id=1];
player p2 = process [id=2];
player p3 = process [id=3];
player p4 = process [id=4];
player p5 = process [id=5];
player p6 = process [id=6];
player p7 = process [id=7];
player p8 = process [id=8];

label p1_in_cs = p1.state == 3;

label mutual_exclusion = ((p1.state == 3) +
                        (p2.state == 3) +
                        (p3.state == 3) +
                        (p4.state == 3) +
                        (p5.state == 3) +
                        (p6.state == 3) +
                        (p7.state == 3) +
                        (p8.state == 3)) <= 1;

label multiple_in_cs = ((p1.state == 3) +
                        (p2.state == 3) +
                        (p3.state == 3) +
                        (p4.state == 3) +
                        (p5.state == 3) +
                        (p6.state == 3) +
                        (p7.state == 3) +
                        (p8.state == 3)) > 1;

label deadlock = p1.deadlock ||
                            p2.deadlock ||
                            p3.deadlock ||
                            p4.deadlock ||
                            p5.deadlock ||
                            p6.deadlock ||
                            p7.deadlock ||
                            p8.deadlock;

label p1_requested_access = (0 < p1.state) && (p1.state < 3);

in_cs : [0 .. 8] init 0;
in_cs' = (p1.start || p2.start || p3.start || p4.start || p5.start || p6.start || p7.start || p8.start) ? 0 :
            (p1.wait ? 1 :
            (p2.wait ? 2 :
            (p3.wait ? 3 :
            (p4.wait ? 4 :
            (p5.wait ? 5 :
            (p6.wait ? 6 :
            (p7.wait ? 7 :
            (p8.wait ? 8 :
            in_cs))))))));

template process
    deadlock : [0 .. 1] init 0;
    deadlock' = !(((in_cs == 0) && (state == 0 || state==2)) ||
                    ((time_waited <= k) && (state == 1)) ||
                    ((time_waited > k) && (in_cs == id) && (state == 2)) ||
                    ((in_cs == id) && (state == 3)) ||
                    (state == 2));

	time_waited : [0 .. k+1] init 0;
	time_waited' = min(((time_waited + 1) * !wait * !req),k+1);

	// Represents the four states it can be in, 0=start, 1=req, 2=wait, 3=cs
	state : [0 .. 3] init 0;
	state' = start ? 0 : (req ? 1 : (wait ? 2 : (cs ? 3 : state)));

	[req] (in_cs == 0) && (state == 0 || state==2);
	[wait] (time_waited <= k) && (state == 1);
	[cs] (time_waited > k) && (in_cs == id) && (state == 2);
	[start] (in_cs == id) && (state == 3);
	[do_nothing] state == 2;
endtemplate